.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Derived 3pm"
.TH Derived 3pm "2018-12-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Derived \- Base class for widgets derived from others
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Tk::MyNewWidget;
\&
\&    use Tk::widgets qw/ BaseWidget, list of Tk widgets /;
\&    use base qw/ Tk::Derived Tk::BaseWidget /;
\&
\&    Construct Tk::Widget \*(AqMyNewWidget\*(Aq;
\&
\&    sub ClassInit {
\&        my( $class, $mw ) = @_;
\&        #... e.g., class bindings here ...
\&        $class\->SUPER::ClassInit( $mw );
\&    }
\&
\&    sub Populate {
\&        my( $self, $args ) = @_;
\&
\&        my $flag = delete $args\->{\-flag};
\&        if( defined $flag ) {
\&            # handle \-flag => xxx which can only be done at create
\&            # time the delete above ensures that new() does not try
\&            # and do  $self\->configure( \-flag => xxx );
\&        }
\&
\&        $self\->SUPER::Populate( $args );
\&
\&        $self = $self\->Component( ... );
\&
\&        $self\->Delegates( ... );
\&
\&        $self\->ConfigSpecs(
\&            \*(Aq\-cursor\*(Aq    => [ SELF, \*(Aqcursor\*(Aq, \*(AqCursor\*(Aq,   undef ],
\&            \*(Aq\-something\*(Aq => [ METHOD, dbName,  dbClass, default ],
\&            \*(Aq\-text\*(Aq      => [ $label, dbName,  dbClass, default ],
\&            \*(Aq\-heading\*(Aq   => [ {\-text => $head},
\&                                heading, Heading,  \*(AqMy Heading\*(Aq ],
\&       ); 
\&   }
\&
\&   sub something {
\&       my( $self, $value) = @_;
\&       if ( @_ > 1 ) {
\&          # set it
\&       }
\&       return # current value
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tk::Derived is used with Perl's multiple inheritance to override some
methods normally inherited from Tk::Widget.
.PP
Tk::Derived should precede any Tk widgets in the class's base class
definition.
.PP
Tk::Derived's main purpose is to apply wrappers to \f(CW\*(C`configure\*(C'\fR and \f(CW\*(C`cget\*(C'\fR
methods of widgets to allow the derived widget to add to or modify behaviour
of the configure options supported by the base widget.
.PP
The derived class should normally override the \f(CW\*(C`Populate\*(C'\fR method provided
by Tk::Derived and call \f(CW\*(C`ConfigSpecs\*(C'\fR to declare configure options.
.PP
The public methods provided by Tk::Derived are as follows:
.IP "\->ConfigSpecs(\-\fIkey\fR => [\fIkind\fR, \fIname\fR, \fIClass\fR, \fIdefault\fR], ...)" 4
.IX Item "->ConfigSpecs(-key => [kind, name, Class, default], ...)"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::ConfigSpecs
Tk::mega
Tk::composite
