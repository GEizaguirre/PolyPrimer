.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Optionmenu 3pm"
.TH Optionmenu 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Optionmenu \- Let the user select one of some predefined options values
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tk::Optionmenu;
\&
\&    $opt = $w\->Optionmenu(
\&                        \-options => REFERENCE_to_OPTIONLIST,
\&                        \-command => CALLBACK,
\&                        \-variable => SCALAR_REF,
\&                        );
\&
\&    $opt\->addOptions( OPTIONLIST );
\&
\&    # OPTION LIST is
\&    #   a)  $val1, $val2, $val3,...
\&    #   b)  [ $lab1=>$val1], [$lab2=>val2], ... ]
\&    #   c)  combination of a) and b), e.g.,
\&    #       val1, [$lab2=>val2], val3, val4, [...], ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBOptionmenu\fR widget allows the user chose between a given set
of options.
.PP
If the user should be able to change the available option have a look
at Tk::BrowseEntry.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-options" 4
.IX Item "-options"
(Re)sets the list of options presented.
.IP "\-command" 4
.IX Item "-command"
Defines the callback that is invokes when a new option
is selected.
.IP "\-variable" 4
.IX Item "-variable"
Reference to a scalar that contains the current value of the
selected option.
.IP "\-textvariable" 4
.IX Item "-textvariable"
Reference to a scalar that contains the text label of the current value of the
selected option.
.SH "METHODS"
.IX Header "METHODS"
.IP "addOptions" 4
.IX Item "addOptions"
Adds \s-1OPTION_LIST\s0 to the already available options.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 2
\& use Tk;
\& my $mw = MainWindow\->new();
\&
\& my ($var, $tvar);
\& my $opt = $mw\->Optionmenu(
\&        \-options => [[jan=>1], [feb=>2], [mar=>3], [apr=>4]],
\&        \-command => sub { print "got: ", shift, "\en" },
\&        \-variable => \e$var,
\&        \-textvariable => \e$tvar
\&       )\->pack;
\&
\& $opt\->addOptions([may=>5],[jun=>6],[jul=>7],[aug=>8]);
\&
\& my $f = $mw\->Frame(\-relief=>\*(Aqgroove\*(Aq, \-borderwidth => 2)\->pack;
\& $f\->Label(\-textvariable=>\e$tvar)\->pack(\-side => \*(Aqleft\*(Aq);
\& $f\->Label(\-text => " \-> ")\->pack(\-side => \*(Aqleft\*(Aq);
\& $f\->Label(\-textvariable=>\e$var)\->pack(\-side => \*(Aqleft\*(Aq);
\&
\& $mw\->Button(\-text=>\*(AqExit\*(Aq, \-command=>sub{$mw\->destroy})\->pack;
\&
\& MainLoop;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::Menubutton, Tk::BrowseEntry
