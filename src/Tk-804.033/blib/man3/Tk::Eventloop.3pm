.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Eventloop 3pm"
.TH Eventloop 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Event \- ToolKit for Events
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Tk::Event;
\&
\& Tk::Event\->fileevent(\e*FH, \*(Aqreadable\*(Aq => callback);
\&
\& Tk::Event\->lineavail(\e*FH, callback);
\&
\& use Tk::Event::Signal qw(INT);
\&
\& $SIG{\*(AqINT\*(Aq} = callback;
\&
\& use Tk::Event::process;
\&
\& Tk::Event\->proc($pid, callback);
\&
\& QueueEvent(callback [, position])
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
That is better than nothing but still hard to use. Most scripts want higher
level result (a line, a \*(L"block\*(R" of data etc.)
.PP
So it has occured to me that we could use new-ish \s-1TIEHANDLE\s0 thus:
.PP
.Vb 1
\& my $obj = tie SOMEHANDLE,Tk::Event::IO;
\& 
\& while (<SOMEHANDLE>)
\&  {
\&  }
.Ve
.PP
Then the \s-1READLINE\s0 routine registers a callback and looks something like:
.PP
.Vb 10
\& sub READLINE
\&  {
\&   my $obj = shift;
\&   Event\->io(*$obj,\*(Aqreadable\*(Aq,sub { sysread(*$obj,${*$obj},1,length(${*$obj}) });
\&   my $pos;
\&   while (($pos = index(${*$obj},$/) < 0)
\&    {
\&     DoOneEvent();
\&    }
\&   Event\->io(*$obj,\*(Aqreadable\*(Aq,\*(Aq\*(Aq); # unregister
\&   $pos += length($/);
\&   my $result = substr(${*$obj},0,$pos);
\&   substr(${*$obj},0,$pos) = \*(Aq\*(Aq;
\&   return $result;
\&  }
.Ve
.PP
This is using the scalar part of the glob representing the _inner_ \s-1IO\s0
as a buffer in which to accumulate chars.
