.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Tcl-perl 3pm"
.TH Tcl-perl 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tcl vs perl \- very old suspect documentation on porting.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This isn't really a .pod yet, nor is it Tcl vs perl
it is a copy of John's comparison of Malcolm's original perl/Tk
port with the current one. It is also out-of-date in places.
.PP
.Vb 1
\&  From: john@WPI.EDU (John Stoffel )
\&
\&  Here are some thoughts on the new Tk extension and how I think the
\&  organization of the commands looks.  Mostly, I\*(Aqm happy with it, it
\&  makes some things more organized and more consistent with tcl/tk, but
\&  since the overlying language is so different, I don\*(Aqt think we need to
\&  follow exactly the tcl/tk model for how to call the language.
\&
\&  The basic structure of the Tk program is:
\&
\&      require Tk;
\&
\&      $top = MainWindow\->new();
\&
\&      #
\&      # create widgets
\&      #
\&
\&      Tk::MainLoop;
\&
\&      sub method1 {
\&      }
\&
\&      sub methodN {
\&      }
\&
\&  This is pretty much the same as tkperl5a5, with some cosmetic naming
\&  changes, and some more useful command name and usage changes.  A quick
\&  comparison in no particular order follows:
\&
\&  tkperl5a5                             Tk
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-       \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  $top=tkinit(name,display,sync);       $top=MainWindow\->new();
\&
\&  tkpack $w, ... ;              $w\->pack(...)
\&
\&  $w = Class::new($top, ...);   $w = $top\->Class(...);
\&
\&  tkmainloop;                   Tk::MainLoop;
\&
\&  tkbind($w,"<key>",sub);               $w\->bind("<key>",sub);
\&
\&  tkdelete($w, ...);            $w\->delete(...);
\&
\&  $w\->scanmark(...);            $w\->scan("mark", ...);
\&
\&  $w\->scandragto(...);          $w\->scan("dragto", ...);
\&
\&  $w\->tkselect();                       $w\->Select();
\&
\&  $w\->selectadjust(...);                $w\->selection("adjust", ...);
\&
\&  $w\->selectto(...);            $w\->selection("to", ...);
\&
\&  $w\->selectfrom(...);          $w\->selection("from", ...);
\&
\&  $w\->tkindex(...);             $w\->index(...);
\&
\&  tclcmd("xxx",...);              &Tk::xxx(...)    # all Tk commands, but no Tcl at all
\&
\&  tclcmd("winfo", xxx, $w, ...);  $w\->xxx(...);
\&
\&                                $w\->mark(...);
\&
\&                                $w\->tag(...);
\&
\&  $w\->grabstatus();             $w\->grab("status");
\&
\&  $w\->grabrelease(...);         $w\->grab("release", ...);
\&
\&  focus($w);                    $w\->focus;
\&
\&  update();                     Tk\->update();
\&
\&  idletasks();                  Tk\->update("idletasks");
\&
\&  wm("cmd",$w, ...);            $w\->cmd(...);
\&
\&  destroy($w);                  $w\->destroy();
\&
\&                                Tk::option(...);
\&                                  $w\->OptionGet(name,Class)
\&
\&                                $w\->place(...)
\&
\&                                Tk::property(...);
\&
\&  $w = Entry::new($parent,...)
\&
\&  is now
\&
\&  $w = $parent\->Entry(...)
\&
\&  As this allows new to be inherited from a Window class.
\&
\&    \-method=>x,\-slave=>y
\&
\&   is now
\&
\&    \-command => [x,y]
\&
\&  1st element of list is treated as "method" if y is an object reference.
\&  (You can have \-command => [a,b,c,d,e] too; b..e get passed as args).
\&
\&  Object references are now hashes rather than scalars and there
\&  is only ever one such per window.  The Tcl_CmdInfo and PathName
\&  are entries in the hash.
\&
\&  (This allows derived classes to
\&  re\-bless the hash and keep their on stuff in it too.)
\&
\&  Tk\*(Aqs "Tcl_Interp" is in fact a ref to "." window.
\&  You can find all the Tk windows descended from it as their object
\&  references get added (by PathName) into this hash.
\&  $w\->MainWindow returns this hash from any window.
\&
\&  I think that it should extend to multiple tkinits / Tk\->news
\&  with different Display\*(Aqs \- if Tk code does.
\&
\&  Finally "bind" passes window as "extra" (or only)
\&  argument. Thus
\&
\&  Tk::Button\->bind(<Any\-Enter>,"Enter");
\&
\&  Binds Enter events to Tk::Button::Enter by default
\&  but gets called as $w\->Enter so derived class of Button can just
\&  define its own Enter method. &EvWref and associated globals and race
\&  conditions are no longer needed.
\&
\&  One thing to beware of : commands bound to events with $widget\->bind
\&  follow same pattern, but get passed extra args :
\&
\&  $widget\->bind(<Any\-1>,[sub {print shift}, $one, $two ]);
\&
\&  When sub gets called it has :
\&
\&     $widget $one $two
\&
\&  passed.
\&
\&  1st extra arg is reference to the per\-widget hash that serves as the
\&  perl object for the widget.
\&
\&  Every time an XEvent a reference to a special class is placed
\&  in the widget hash. It can be retrieved by $w\->XEvent method.
\&
\&  The methods of the XEvent class are the
\&  Tcl/Tk % special characters.
\&
\&  Thus:
\&
\&  $widget\->bind(<Any\-KeyPress>,
\&                sub {
\&                 my $w = shift;
\&                 my $e = $w\->XEvent;
\&                 print $w\->PathName," ",$e\->A," pressed ,$e\->xy,"\en");
\&                });
\&
\&  XEvent\->xy is a special case which returns "@" . $e\->x . "," . $e\->y
\&  which is common in Text package.
\&
\&  Because of passing a blessed widget hash to "bound" subs they can be
\&  bound to (possibly inherited) methods of the widget\*(Aqs class:
\&
\&  Class\->bind(<Any\-Down>,Down);
\&
\&  sub Class::Down
\&  {
\&   my $w = shift;
\&   # handle down arrow
\&  }
\&
\&  Also:
\&
\&  \-command and friends can take a list the 1st element can be a ref to
\&  as sub or a method name. Remaining elements are passed as args to the
\&  sub at "invoke" time. Thus :
\&
\&  $b= $w\->Button(blah blah, \*(Aq\-command\*(Aq => [sub{print shift} , $fred ]);
\&
\&  Should do the trick, provided $fred is defined at time of button creation.
\&
\&  Thus 1st element of list is equivalent to Malcolm\*(Aqs \-method and second
\&  would be his \-slave.  Any further elements are a bonus and avoid
\&  having to pass ref to an array/hash as a slave.
.Ve
