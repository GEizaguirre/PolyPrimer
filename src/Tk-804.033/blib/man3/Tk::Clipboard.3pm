.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Clipboard 3pm"
.TH Clipboard 3pm "2018-12-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::clipboard \- Manipulate Tk clipboard
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI\f(CI$widget\fI\fR\->\fBclipboard\fR\fIOption\fR?(\fIargs\fR)?
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This command provides an interface to the Tk clipboard,
which stores data for later retrieval using the selection mechanism.
In order to copy data into the clipboard, \fBclipboardClear\fR must
be called, followed by a sequence of one or more calls to
\&\fBclipboardAppend\fR.  To ensure that the clipboard is updated atomically, all
appends should be completed before returning to the event loop.
.PP
The following methods are currently supported:
.IP "\fI\f(CI$widget\fI\fR\->\fBclipboardClear\fR" 4
.IX Item "$widget->clipboardClear"
Claims ownership of the clipboard on \fI\f(CI$widget\fI\fR's display and removes
any previous contents.   Returns an empty string.
.IP "\fI\f(CI$widget\fI\fR\->\fBclipboardAppend\fR(?\fB\-format\fR=>\fIformat\fR?,?\fB\-type\fR=>\fItype\fR?,?\fB\-\-\fR?,\fIdata\fR)" 4
.IX Item "$widget->clipboardAppend(?-format=>format?,?-type=>type?,?--?,data)"
Appends \fIdata\fR to the clipboard on \f(CW$widget\fR's
display in the form given by \fItype\fR with the representation given
by \fIformat\fR and claims ownership of the clipboard on \f(CW$widget\fR's
display.
.RS 4
.Sp
.RS 4
\&\fIType\fR specifies the form in which the selection is to be returned
(the desired ``target'' for conversion, in \s-1ICCCM\s0 terminology), and
should be an atom name such as \s-1STRING\s0 or \s-1FILE_NAME\s0; see the
Inter-Client Communication Conventions Manual for complete details.
\&\fIType\fR defaults to \s-1STRING.\s0
.Sp
The \fIformat\fR argument specifies the representation that should be
used to transmit the selection to the requester (the second column of
Table 2 of the \s-1ICCCM\s0), and defaults to \s-1STRING.\s0  If \fIformat\fR is
\&\s-1STRING,\s0 the selection is transmitted as 8\-bit \s-1ASCII\s0 characters.
See the Tk::Selection documentation for explanation of what happens
if \fIformat\fR is not \s-1STRING.\s0
Note that arguments passed to
\&\fBclipboardAppend\fR are concatenated before conversion, so the
caller must take care to ensure appropriate spacing across string
boundaries.  All items appended to the clipboard with the same
\&\fItype\fR must have the same \fIformat\fR.
.Sp
A \fB\-\-\fR argument may be specified to mark the end of options:  the
next argument will always be used as \fIdata\fR.
This feature may be convenient if, for example, \fIdata\fR starts
with a \fB\-\fR.
.RE
.RE
.RS 4
.RE
.IP "\fI\f(CI$widget\fI\fR\->\fBclipboardGet\fR( ?\-type? );" 4
.IX Item "$widget->clipboardGet( ?-type? );"
Retrieve data from the clipboard on  \fIwidget\fR's  display.
\&\fI\-type\fR specifies the form in which the data is
to be returned and should be an atom  name  such  as  \s-1STRING\s0  or
\&\s-1FILE_NAME.\s0  Type defaults to \s-1STRING.\s0  This command is equivalent 
to \f(CW\*(C`SelectionGet( \-selection => \*(AqCLIPBOARD\*(Aq )\*(C'\fR.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
clear, format, clipboard, append, selection, type
