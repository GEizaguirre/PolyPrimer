.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Tk::Pane 3pm"
.TH Tk::Pane 3pm "2013-11-15" "Tk804.033" "perl/Tk Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Pane \- A window panner
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tk::Pane;
\&
\&    $pane = $mw\->Scrolled("Pane", Name => \*(Aqfred\*(Aq,
\&        \-scrollbars => \*(Aqsoe\*(Aq,
\&        \-sticky => \*(Aqwe\*(Aq,
\&        \-gridded => \*(Aqy\*(Aq
\&    );
\&
\&    $pane\->Frame;
\&
\&    $pane\->pack;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTk::Pane\fR provides a scrollable frame widget. Once created it can be
treated as a frame, except it is scrollable.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-gridded\fR => \fIdirection\fR" 4
.IX Item "-gridded => direction"
Specifies if the top and left edges of the pane should snap to a
grid column. This option is only useful if the widgets in the pane
are managed by the \fIgrid\fR geometry manager. Possible values are
\&\fBx\fR, \fBy\fR and \fBxy\fR.
.IP "\fB\-sticky\fR => \fIstyle\fR" 4
.IX Item "-sticky => style"
If Pane is larger than its requested dimensions, this option may be used to
position (or stretch) the slave within its cavity. \fIStyle\fR is a string that
contains zero or more of the characters n, s, e or w. The string can optionally
contains spaces or commas, but they are ignored. Each letter refers to a side
(north, south, east, or west) that the slave will \*(L"stick\*(R" to. If both n and s
(or e and w) are specified, the slave will be stretched to fill the entire
height (or width) of its cavity.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fI\f(CI$pane\fI\fR\->\fBsee\fR(\fI\f(CI$widget\fI\fR ?,\fIoptions\fR?)" 4
.IX Item "$pane->see($widget ?,options?)"
Adjusts the view so that \fI\f(CI$widget\fI\fR is visable. Aditional parameters in
\&\fIoptions-value\fR pairs can be passed, each \fIoption-value\fR pair must be
one of the following
.RS 4
.IP "\fB\-anchor\fR => \fIanchor\fR" 8
.IX Item "-anchor => anchor"
Specifies how to make the widget visable. If not given then as much of
the widget as possible is made visable.
.Sp
Possible values are \fBn\fR, \fBs\fR, \fBw\fR, \fBe\fR, \fBnw\fR, \fBne\fR, \fBsw\fR and \fBse\fR.
This will cause an edge on the widget to be aligned with the corresponding
edge on the pane. for example \fBnw\fR will cause the top left of the widget
to be placed at the top left of the pane. \fBs\fR will cause the bottom of the
widget to be placed at the bottom of the pane, and as much of the widget
as possible made visable in the x direction.
.RE
.RS 4
.RE
.IP "\fI\f(CI$pane\fI\fR\->\fBxview\fR" 4
.IX Item "$pane->xview"
Returns a list containing two elements, both of which are real fractions
between 0 and 1. The first element gives the position of  the left of the
window, relative to the Pane as a whole (0.5 means it is halfway through the
Pane, for example). The second element gives the position of the right of the
window, relative to the Pane as a whole.
.IP "\fI\f(CI$pane\fI\fR\->\fBxview\fR(\fI\f(CI$widget\fI\fR)" 4
.IX Item "$pane->xview($widget)"
Adjusts the view in the window so that \fIwidget\fR is displayed at the left of
the window.
.IP "\fI\f(CI$pane\fI\fR\->\fBxview\fR(\fBmoveto\fR => \fIfraction\fR)" 4
.IX Item "$pane->xview(moveto => fraction)"
Adjusts the view in the window so that \fIfraction\fR of the total width of the
Pane is off-screen to the left. fraction must be a fraction between 0 and 1.
.IP "\fI\f(CI$pane\fI\fR\->\fBxview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)" 4
.IX Item "$pane->xview(scroll => number, what)"
This command shifts the view in the window left or right according to \fInumber\fR
and \fIwhat\fR. \fINumber\fR must be an integer. \fIWhat\fR must be either \fBunits\fR or
\&\fBpages\fR or an abbreviation of one of these. If \fIwhat\fR is \fBunits\fR, the view
adjusts left or right by \fInumber\fR*10 screen units on the display; if it is
\&\fBpages\fR then the view adjusts by number screenfuls. If number is negative then
widgets farther to the left become visible; if it is positive then widgets
farther to the right become visible.
.IP "\fI\f(CI$pane\fI\fR\->\fByview\fR" 4
.IX Item "$pane->yview"
Returns a list containing two elements, both of which are real fractions
between 0 and 1. The first element gives the position of  the top of the
window, relative to the Pane as a whole (0.5 means it is halfway through the
Pane, for example). The second element gives the position of the bottom of the
window, relative to the Pane as a whole.
.IP "\fI\f(CI$pane\fI\fR\->\fByview\fR(\fI\f(CI$widget\fI\fR)" 4
.IX Item "$pane->yview($widget)"
Adjusts the view in the window so that \fIwidget\fR is displayed at the top of the
window.
.IP "\fI\f(CI$pane\fI\fR\->\fByview\fR(\fBmoveto\fR => \fIfraction\fR)" 4
.IX Item "$pane->yview(moveto => fraction)"
Adjusts the view in the window so that \fIfraction\fR of the total width of the
Pane is off-screen to the top. fraction must be a fraction between 0 and 1.
.IP "\fI\f(CI$pane\fI\fR\->\fByview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)" 4
.IX Item "$pane->yview(scroll => number, what)"
This command shifts the view in the window up or down according to \fInumber\fR
and \fIwhat\fR. \fINumber\fR must be an integer. \fIWhat\fR must be either \fBunits\fR or
\&\fBpages\fR or an abbreviation of one of these. If \fIwhat\fR is \fBunits\fR, the view
adjusts up or down by \fInumber\fR*10 screen units on the display; if it is
\&\fBpages\fR then the view adjusts by number screenfuls. If number is negative then
widgets farther up become visible; if it is positive then widgets farther down
become visible.
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <\fIgbarr@pobox.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-1998 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
