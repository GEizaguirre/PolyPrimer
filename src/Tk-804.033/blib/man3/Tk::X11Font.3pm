.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "X11Font 3pm"
.TH X11Font 3pm "2018-12-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Font \- a class for finding X Fonts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Tk::X11Font;
\&
\& $font = $widget\->X11Font(foundry => \*(Aqadobe\*(Aq,
\&                       family  => \*(Aqtimes\*(Aq,
\&                       point   => 120
\&                      );
\&
\& $font = $widget\->X11Font(\*(Aq*\-courier\-medium\-r\-normal\-*\-*\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&   This module can be use to interrogate the X server what fonts are
\&   avaliable.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Foundry( [ $val ] )"
.el .SS "Foundry( [ \f(CW$val\fP ] )"
.IX Subsection "Foundry( [ $val ] )"
.ie n .SS "Family( [ $val ] )"
.el .SS "Family( [ \f(CW$val\fP ] )"
.IX Subsection "Family( [ $val ] )"
.ie n .SS "Weight( [ $val ] )"
.el .SS "Weight( [ \f(CW$val\fP ] )"
.IX Subsection "Weight( [ $val ] )"
.ie n .SS "Slant( [ $val ] )"
.el .SS "Slant( [ \f(CW$val\fP ] )"
.IX Subsection "Slant( [ $val ] )"
.ie n .SS "Swidth( [ $val ] )"
.el .SS "Swidth( [ \f(CW$val\fP ] )"
.IX Subsection "Swidth( [ $val ] )"
.ie n .SS "Adstyle( [ $val ] )"
.el .SS "Adstyle( [ \f(CW$val\fP ] )"
.IX Subsection "Adstyle( [ $val ] )"
.ie n .SS "Pixel( [ $val ] )"
.el .SS "Pixel( [ \f(CW$val\fP ] )"
.IX Subsection "Pixel( [ $val ] )"
.ie n .SS "Point( [ $val ] )"
.el .SS "Point( [ \f(CW$val\fP ] )"
.IX Subsection "Point( [ $val ] )"
.ie n .SS "Xres( [ $val ] )"
.el .SS "Xres( [ \f(CW$val\fP ] )"
.IX Subsection "Xres( [ $val ] )"
.ie n .SS "Yres( [ $val ] )"
.el .SS "Yres( [ \f(CW$val\fP ] )"
.IX Subsection "Yres( [ $val ] )"
.ie n .SS "Space( [ $val ] )"
.el .SS "Space( [ \f(CW$val\fP ] )"
.IX Subsection "Space( [ $val ] )"
.ie n .SS "Avgwidth( [ $val ] )"
.el .SS "Avgwidth( [ \f(CW$val\fP ] )"
.IX Subsection "Avgwidth( [ $val ] )"
.ie n .SS "Registry( [ $val ] )"
.el .SS "Registry( [ \f(CW$val\fP ] )"
.IX Subsection "Registry( [ $val ] )"
.ie n .SS "Encoding( [ $val ] )"
.el .SS "Encoding( [ \f(CW$val\fP ] )"
.IX Subsection "Encoding( [ $val ] )"
Set the given field in the font name to \f(CW$val\fR if given and return the current
or previous value
.ie n .SS "Name( [ $max ] )"
.el .SS "Name( [ \f(CW$max\fP ] )"
.IX Subsection "Name( [ $max ] )"
In a list context it returns a list of all font names that match the
fields given. It will return a maximum of \f(CW$max\fR names, or 128 if
\&\f(CW$max\fR is not given.
.PP
In a scalar contex it returns the first matching name or undef
.SS "Clone( [ key => value, [ ...]] )"
.IX Subsection "Clone( [ key => value, [ ...]] )"
Create a duplicate of the curent font object and modify the given fields
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr <Graham.Barr@tiuk.ti.com>
.SH "HISTORY"
.IX Header "HISTORY"
11\-Jan\-96 Initial version
.PP
08\-Nov\-98 Renamed for Tk800.012
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-1996 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
