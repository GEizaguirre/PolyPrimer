.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "UserGuide 3pm"
.TH UserGuide 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::UserGuide \- Writing Tk applications in Perl 5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document is for beginners.  It assumes you know some \fBPerl\fR, and
have it and Tk running.  If you are \fInot\fR currently reading this
document courtesy of the \fBwidget\fR demonstration program, please be
sure to run \fBwidget\fR, as it will show you the various widget types
supported by Tk and how to use them. \fBwidget\fR should be installed in
your default path, so type \fIwidget\fR at a command prompt.
.PP
Here are links to other novice tutorials:
.PP
<http://www.lehigh.edu/~sol0/ptk/tpj1.html>
<http://www.lehigh.edu/~sol0/ptk/perlmonth01/pm1.html>
.PP
\&\fIMastering Perl/Tk\fR is the definitive book on Perl/Tk:
.PP
<http://www.oreilly.com/catalog/mastperltk>
.SH "Some Background"
.IX Header "Some Background"
Tk \s-1GUI\s0 programming is event-driven.  (This may already be familiar to
you.)  In event-driven programs, the main \s-1GUI\s0 loop is outside of the
user program and inside the \s-1GUI\s0 library.  This loop \- initiated by
calling \fBMainLoop\fR \- watches all events of interest and activates
the correct handler procedures to handle these events.  Some of these
handler procedures may be user-supplied; others will be part of the
library.
.PP
For a programmer, this means that you're not watching what is happening;
instead, you are requested by the toolkit to perform actions whenever
necessary.
So, you're not watching for 'raise window / close window / redraw window'
requests, but you tell the toolkit which routine will handle such cases,
and the toolkit will call the procedures when required. These procedures
are known as \fIcallbacks\fR, and some of them you write yourself.
.SH "First Requirements"
.IX Header "First Requirements"
\&\fBPerl\fR programs that use Tk need to include \f(CW\*(C`use Tk\*(C'\fR.
A program should also use \f(CW\*(C`use strict\*(C'\fR and the \fB\-w\fR switch to ensure
the program is working without common errors.
.PP
Any Perl/Tk application starts by creating the Tk \fBMainWindow\fR.  You
then create items inside the \fBMainWindow\fR, and/or create new windows
called \fBToplevel\fRs that also contain child items, before starting the
\&\fBMainLoop\fR, which is the last logical statment in your program. You
can also create more items and windows while you're running, using
callbacks.  Items are only shown on the display after they have been
arranged by a \fIgeometry manager\fR like \fBpack\fR; more information on
this later.  \fBMainLoop\fR starts the \s-1GUI\s0 and handle all events.  That's
all there is to it!  A trivial one-window example is shown below:
.PP
.Vb 3
\&    #!/usr/bin/perl \-w  
\&    use Tk;
\&    use strict;
\&
\&    my $mw = MainWindow\->new;
\&    $mw\->Label(\-text => \*(AqHello, world!\*(Aq)\->pack;
\&    $mw\->Button(
\&        \-text    => \*(AqQuit\*(Aq,
\&        \-command => sub { exit },
\&    )\->pack;
\&    MainLoop;
.Ve
.PP
Please run this example.  It shows you two widget types, a \fBLabel\fR
and a \fBButton\fR, and how they are packed. When clicked, the \fBButton\fR
widget invokes the callback specified by the \f(CW\*(C`\-command\*(C'\fR option.  Finally,
note the typical Tk style using \f(CW\*(C`\-option\*(C'\fR => \f(CW\*(C`value\*(C'\fR pairs.
.SH "Widget creation"
.IX Header "Widget creation"
Tk windows and widgets are hierarchical, i.e.Â one window includes
one or more other windows.  You create the first Tk window using
\&\f(CW\*(C`MainWindow\->new\*(C'\fR.  This returns a window handle, assigned to
\&\f(CW$mw\fR in the example above.  Keep track of the main handle, commonly
called a \fIwidget reference\fR.
.PP
You can use any Tk handle to create child widgets within the window (or
widget).  This is done by calling the Tk constructor method on the
variable.  In the example above, the \f(CW\*(C`Label\*(C'\fR method called from
\&\f(CW$mw\fR creates a \fBLabel\fR widget inside the \fBMainWindow\fR.  In the
constructor call, you can specify various options; you can later add
or change options for any widget using the \fBconfigure\fR method, which
takes the same parameters as the constructor.  The one exception to
the hierarchical structure is the \fBToplevel\fR constructor, which
creates a new outermost window.
.PP
After you create any widget (other than the \fBMainWindow\fR or
\&\fBToplevel\fRs, you must render it by calling \fBpack\fR.  (This is not
entirely true; more later)).  If you do not need to refer to the widget
after construction and packing, call \fBpack\fR off the constructor
results, as shown for the \fBLabel\fR and \fBButton\fR in the example above.  Note
that the result of the compound call is the result of \fBpack\fR, which
is a valid Tk handle.
.PP
Windows and widgets are deleted by calling \fBdestroy\fR on them;
this will delete and un-draw the widget and all its children.
.SH "Standard Tk widgets"
.IX Header "Standard Tk widgets"
Here is an itemize of the standard Tk widget set.
.IP "Button" 4
.IX Item "Button"
.PD 0
.IP "Canvas" 4
.IX Item "Canvas"
.IP "Checkbutton" 4
.IX Item "Checkbutton"
.IP "Entry" 4
.IX Item "Entry"
.IP "Frame" 4
.IX Item "Frame"
.IP "Label" 4
.IX Item "Label"
.IP "Labelframe" 4
.IX Item "Labelframe"
.IP "Listbox" 4
.IX Item "Listbox"
.IP "Menu" 4
.IX Item "Menu"
.IP "Menubutton" 4
.IX Item "Menubutton"
.IP "Message" 4
.IX Item "Message"
.IP "Panedwindow" 4
.IX Item "Panedwindow"
.IP "Radiobutton" 4
.IX Item "Radiobutton"
.IP "Scale" 4
.IX Item "Scale"
.IP "Scrollbar" 4
.IX Item "Scrollbar"
.IP "Spinbox" 4
.IX Item "Spinbox"
.IP "Text" 4
.IX Item "Text"
.IP "Toplevel" 4
.IX Item "Toplevel"
.PD
.PP
Perl/Tk provides an equal number of new widgets, above and beyond this
core set.
.IP "Adjuster" 4
.IX Item "Adjuster"
.PD 0
.IP "Balloon" 4
.IX Item "Balloon"
.IP "BrowseEntry" 4
.IX Item "BrowseEntry"
.IP "ColorEditor" 4
.IX Item "ColorEditor"
.IP "Dialog" 4
.IX Item "Dialog"
.IP "DialogBox" 4
.IX Item "DialogBox"
.IP "DirTree" 4
.IX Item "DirTree"
.IP "ErrorDialog" 4
.IX Item "ErrorDialog"
.IP "FBox" 4
.IX Item "FBox"
.IP "FileSelect" 4
.IX Item "FileSelect"
.IP "HList" 4
.IX Item "HList"
.IP "LabEntry" 4
.IX Item "LabEntry"
.IP "LabFrame" 4
.IX Item "LabFrame"
.IP "NoteBook" 4
.IX Item "NoteBook"
.IP "Optionmenu" 4
.IX Item "Optionmenu"
.IP "Pane" 4
.IX Item "Pane"
.IP "ProgressBar" 4
.IX Item "ProgressBar"
.IP "ROText" 4
.IX Item "ROText"
.IP "Table" 4
.IX Item "Table"
.IP "TextUndo" 4
.IX Item "TextUndo"
.IP "Tiler" 4
.IX Item "Tiler"
.IP "TList" 4
.IX Item "TList"
.IP "Tree" 4
.IX Item "Tree"
.PD
.SH "Variables and callback routines"
.IX Header "Variables and callback routines"
Most graphical interfaces are used to set up a set of values and conditions,
and then perform the appropriate action.  The Tk toolkit is different
from your average text-based prompting or menu driven system in that you do
not collect settings yourself, and decide on an action based on an
input code; instead, you leave these
values to your toolkit and only get them when the action is performed.
.PP
So, where a traditional text-based system would look like this:
.PP
.Vb 2
\&    #!/usr/bin/perl \-w
\&    use strict;
\&
\&    print "Please type a font name\en";
\&    my $font = <>; chomp $font;
\&    # Validate font
\&
\&    print "Please type a file name\en";
\&    my $filename = <>; chomp $filename;
\&    # Validate filename
\&
\&    print "Type <1> to fax, <2> to print\en";
\&    my $option = <>; chomp $option;
\&    if ($option eq 1) {
\&        print "Faxing $filename in font $font\en";
\&    } elsif ($option eq 2) {
\&        print "Now sending $filename to printer in font $font\en";
\&    }
.Ve
.PP
The slightly larger example below shows how to do this in Tk.
Note the use of callbacks.  Note, also, that Tk handles the values, and
the subroutine uses the method \fBget\fR to get at the values.
If a user changes his mind and wants to change the font again,
the application never notices; it's all handled by Tk.
.PP
.Vb 3
\&    #!/usr/bin/perl \-w
\&    use Tk;
\&    use strict;
\&
\&    my $mw = MainWindow\->new;
\&
\&    $mw\->Label(\-text => \*(AqFile Name\*(Aq)\->pack;
\&    my $filename = $mw\->Entry(\-width => 20);
\&    $filename\->pack;
\&
\&    $mw\->Label(\-text => \*(AqFont Name\*(Aq)\->pack;
\&    my $font = $mw\->Entry(\-width => 10);
\&    $font\->pack;
\&
\&    $mw\->Button(
\&        \-text => \*(AqFax\*(Aq,
\&        \-command => sub{do_fax($filename, $font)}
\&    )\->pack;
\&
\&    $mw\->Button(
\&        \-text => \*(AqPrint\*(Aq,
\&        \-command => sub{do_print($filename, $font)}
\&    )\->pack;
\&
\&    MainLoop;
\&
\&    sub do_fax {
\&        my ($file, $font) = @_;
\&        my $file_val = $file\->get;
\&        my $font_val = $font\->get;
\&        print "Now faxing $file_val in font $font_val\en";
\&    }
\&
\&    sub do_print {
\&        my ($file, $font) = @_;
\&        my $file_val = $file\->get;
\&        my $font_val = $font\->get;
\&        print "Sending file $file_val to printer in font $font_val\en";
\&    }
.Ve
.SH "The packer \- grouping with Frame widgets"
.IX Header "The packer - grouping with Frame widgets"
In the examples above, you must have noticed the \fBpack\fR calls.  This
is one of the more complicated parts of Tk.  The basic idea is that
any window or widget should be subject to a Tk geometry manager; the
\&\fIpacker\fR is one of the placement managers, and \fBgrid\fR is another.
.PP
The actions of the packer are rather simple: when applied
to a widget, the packer positions that widget on the indicated position
within the remaining space in its parent.  By default, the position is
on top; this means the next items will be put below.  You can also
specify the left, right, or bottom positions.  Specify position
using \fB\-side => 'right'\fR.
.PP
Additional packing parameters specify the behavior of the widget when
there is some space left in the \fBFrame\fR or when the window size is
increased.  If widgets should maintain a fixed size, specify nothing;
this is the default.  For widgets that you want to fill up the current
horizontal and/or vertical space, specify \fB\-fill => 'x'\fR, \fB'y'\fR,
or \fB'both'\fR; for widgets that should grow, specify \fB\-expand => 1\fR.
These parameters are not shown in the example below; see the \fBwidget\fR
demonstration.
.PP
If you want to group some items within a window that have a different
packing order than others, you can include them in a Frame.  This is a
do-nothing window type that is meant for packing or filling (and to
play games with borders and colors).
.PP
The example below shows the use of pack and Frames:
.PP
.Vb 3
\&    #!/usr/bin/perl \-w
\&    use Tk;
\&    use strict;
\&
\&    # Take top and the bottom \- now implicit top is in the middle
\&    my $mw = MainWindow\->new;
\&    $mw\->title( \*(AqThe MainWindow\*(Aq );
\&    $mw\->Label(\-text => \*(AqAt the top (default)\*(Aq)\->pack;
\&    $mw\->Label(\-text => \*(AqAt the bottom\*(Aq)\->pack(\-side => \*(Aqbottom\*(Aq);
\&    $mw\->Label(\-text => \*(AqThe middle remains\*(Aq)\->pack;
\&
\&    # Since left and right are taken, bottom will not work...
\&    my $top1 = $mw\->Toplevel;
\&    $top1\->title( \*(AqToplevel 1\*(Aq );
\&    $top1\->Label(\-text => \*(AqLeft\*(Aq)\->pack(\-side => \*(Aqleft\*(Aq);
\&    $top1\->Label(\-text => \*(AqRight\*(Aq)\->pack(\-side => \*(Aqright\*(Aq);
\&    $top1\->Label(\-text => \*(Aq?Bottom?\*(Aq)\->pack(\-side => \*(Aqbottom\*(Aq);
\&
\&    # But when you use Frames, things work quite alright
\&    my $top2 = $mw\->Toplevel;
\&    $top2\->title( \*(AqToplevel 2\*(Aq );
\&    my $frame = $top2\->Frame;
\&    $frame\->pack;
\&    $frame\->Label(\-text => \*(AqLeft2\*(Aq)\->pack(\-side => \*(Aqleft\*(Aq);
\&    $frame\->Label(\-text => \*(AqRight2\*(Aq)\->pack(\-side => \*(Aqright\*(Aq);
\&    $top2\->Label(\-text => \*(AqBottom2\*(Aq)\->pack(\-side => \*(Aqbottom\*(Aq);
\&
\&    MainLoop;
.Ve
.SH "More than one window"
.IX Header "More than one window"
Most real applications require more than one window.  As you just saw,
you can create more outermost windows by using a \fBToplevel\fR widget.
Each window is independent; destroying a \fBToplevel\fR window does not
affect the others as long as they are not a child of the closed
\&\fBToplevel\fR.  However, exiting the \fBMainWindow\fR will destroy all remaining
\&\fBToplevel\fR widgets and end the application.  The
example below shows a trivial three-window application:
.PP
.Vb 3
\&    #!/usr/bin/perl \-w
\&    use Tk;
\&    use strict;
\&
\&    my $mw = MainWindow\->new;
\&    fill_window($mw, \*(AqMain\*(Aq);
\&    my $top1 = $mw\->Toplevel;
\&    fill_window($top1, \*(AqFirst top\-level\*(Aq);
\&    my $top2 = $mw\->Toplevel;
\&    fill_window($top2, \*(AqSecond top\-level\*(Aq);
\&    MainLoop;
\&
\&    sub fill_window {
\&        my ($window, $header) = @_;
\&        $window\->Label(\-text => $header)\->pack;
\&        $window\->Button(
\&            \-text    => \*(Aqclose\*(Aq,
\&            \-command => [$window => \*(Aqdestroy\*(Aq]
\&        )\->pack(\-side => \*(Aqleft\*(Aq);
\&        $window\->Button(
\&            \-text    => \*(Aqexit\*(Aq,
\&            \-command => [$mw => \*(Aqdestroy\*(Aq]
\&        )\->pack(\-side => \*(Aqright\*(Aq);
\&    }
.Ve
.SH "More callbacks"
.IX Header "More callbacks"
So far, all callback routines shown called a user procedure.
You can also have a callback routine call another Tk routine.
This is the way that scroll bars are implemented: scroll-bars
can call a Tk item or a user procedure, whenever their position
has changed.  The Tk item that has a scrollbar attached calls the
scrollbar when its size or offset has changed.  In this way,
the items are linked.  You can still ask a scrollbar's position,
or set it by hand \- but the defaults will be taken care of.
.PP
The example below shows a \fBListbox\fR with a scroll bar.  Moving
the scrollbar moves the \fBListbox\fR.  Scanning a \fBListbox\fR (dragging
an item with the left mouse button) moves the scrollbar.
.PP
.Vb 3
\&     #!/usr/bin/perl \-w
\&     use Tk;
\&     use strict;
\&
\&     my $mw = MainWindow\->new;
\&     my $box = $mw\->Listbox(
\&         \-relief => \*(Aqsunken\*(Aq,
\&         \-height  => 5,
\&         \-setgrid => 1,
\&    );
\&    my @items = qw(One Two Three Four Five Six Seven
\&                   Eight Nine Ten Eleven Twelve);
\&    foreach (@items) {
\&       $box\->insert(\*(Aqend\*(Aq, $_);
\&    }
\&    my $scroll = $mw\->Scrollbar(\-command => [\*(Aqyview\*(Aq, $box]);
\&    $box\->configure(\-yscrollcommand => [\*(Aqset\*(Aq, $scroll]);
\&    $box\->pack(\-side => \*(Aqleft\*(Aq, \-fill => \*(Aqboth\*(Aq, \-expand => 1);
\&    $scroll\->pack(\-side => \*(Aqright\*(Aq, \-fill => \*(Aqy\*(Aq);
\&
\&    MainLoop;
.Ve
.PP
Note that there's a convenience method \fBScrolled\fR
which helps constructing widgets with automatically managed
scrollbars.
.SH "Canvases and tags"
.IX Header "Canvases and tags"
One of the most powerful widgets in Tk is the \fBCanvas\fR window.
In a \fBCanvas\fR window, you can draw simple graphics and include
other widgets.  The \fBCanvas\fR area may be larger than the visible window,
and may then be scrolled.  Any item you draw on the canvas has its own id,
and may optionally have one or more \fItags\fR.  You may refer to any
item by its id, and may refer to any group of items by a common tag;
you can move, delete, or change groups of items using these tags,
and you can \fIbind\fR actions to tags.  For a properly designed (often
structured) \fBCanvas\fR, you can specify powerful actions quite simply.
.PP
In the example below, actions are bound to circles (single click)
and blue items (double-click); obviously, this can be extended to any
tag or group of tags.
.PP
.Vb 3
\&    #!/usr/bin/perl \-w
\&    use Tk;
\&    use strict;
\&
\&    # Create B<MainWindow> and canvas
\&    my $mw = MainWindow\->new;
\&    my $canvas = $mw\->Canvas;
\&    $canvas\->pack(\-expand => 1, \-fill => \*(Aqboth\*(Aq);
\&
\&    # Create various items
\&    create_item($canvas, 1, 1, \*(Aqcircle\*(Aq, \*(Aqblue\*(Aq, \*(AqJane\*(Aq);
\&    create_item($canvas, 4, 4, \*(Aqcircle\*(Aq, \*(Aqred\*(Aq, \*(AqPeter\*(Aq);
\&    create_item($canvas, 4, 1, \*(Aqsquare\*(Aq, \*(Aqblue\*(Aq, \*(AqJames\*(Aq);
\&    create_item($canvas, 1, 4, \*(Aqsquare\*(Aq, \*(Aqred\*(Aq, \*(AqPatricia\*(Aq);
\&
\&    # Single\-clicking with left on a \*(Aqcircle\*(Aq item invokes a procedure
\&    $canvas\->bind(\*(Aqcircle\*(Aq, \*(Aq<1>\*(Aq => sub {handle_circle($canvas)});
\&    # Double\-clicking with left on a \*(Aqblue\*(Aq item invokes a procedure
\&    $canvas\->bind(\*(Aqblue\*(Aq, \*(Aq<Double\-1>\*(Aq => sub {handle_blue($canvas)});
\&    MainLoop;
\&
\&    # Create an item; use parameters as tags (this is not a default!)
\&    sub create_item {
\&        my ($can, $x, $y, $form, $color, $name) = @_;
\&
\&        my $x2 = $x + 1;
\&        my $y2 = $y + 1;
\&        my $kind;
\&        $kind = \*(Aqoval\*(Aq if ($form eq \*(Aqcircle\*(Aq);
\&        $kind = \*(Aqrectangle\*(Aq if ($form eq \*(Aqsquare\*(Aq);
\&        $can\->create(
\&            ($kind, "$x" . \*(Aqc\*(Aq, "$y" . \*(Aqc\*(Aq,
\&            "$x2" . \*(Aqc\*(Aq, "$y2" . \*(Aqc\*(Aq),
\&            \-tags => [$form, $color, $name],
\&            \-fill => $color);
\&    }
\&
\&    # This gets the real name (not current, blue/red, square/circle)
\&    # Note: you\*(Aqll want to return a list in realistic situations...
\&    sub get_name {
\&        my ($can) = @_;
\&        my $item = $can\->find(\*(Aqwithtag\*(Aq, \*(Aqcurrent\*(Aq);
\&        my @taglist = $can\->gettags($item);
\&        my $name;
\&        foreach (@taglist) {
\&            next if ($_ eq \*(Aqcurrent\*(Aq);
\&            next if ($_ eq \*(Aqred\*(Aq or $_ eq \*(Aqblue\*(Aq);
\&            next if ($_ eq \*(Aqsquare\*(Aq or $_ eq \*(Aqcircle\*(Aq);
\&            $name = $_;
\&            last;
\&        }
\&        return $name;
\&    }
\&
\&    sub handle_circle {
\&        my ($can) = @_;
\&        my $name = get_name($can);
\&        print "Action on circle $name...\en";
\&    }
\&
\&    sub handle_blue {
\&        my ($can) = @_;
\&        my $name = get_name($can);
\&        print "Action on blue item $name...\en";
\&    }
.Ve
.SH "Perl/Tk and Unicode"
.IX Header "Perl/Tk and Unicode"
Perl/Tk follows Perl's model of handling Unicode. That is, if a string
is correctly flagged as a \*(L"character\*(R" string in the sense
like described in \*(L"\s-1TERMINOLOGY\*(R"\s0 in Encode, then Perl/Tk will very
probably display and handle this string correctly.
.PP
Note that every variable which is passed somehow into a Perl/Tk method
will be implicitely changed into an internally utf8\-flagged variable.
Semantically nothing changes, as the series of codepoints stays the
same, but things will change when variables with high-bit iso\-8859\-1
characters will be passed to the \*(L"outer\*(R" world. In this case you have
to explicitely mark the encoding of your output stream if using \s-1IO,\s0 or
encode the variables using Encode for other style of communication.
.PP
This is the theory, now some examples.
.PP
If you use non\-iso\-8859\-1 characters in the source code, then use
either the \f(CW\*(C`use utf8;\*(C'\fR or \f(CW\*(C`use encoding \*(Aq\f(CIencodingname\f(CW\*(Aq\*(C'\fR pragma:
.PP
.Vb 5
\&     use utf8;
\&     use Tk;
\&     my $x = "some characters using utf8 encoding";
\&     tkinit\->Label(\-text => $x)\->pack;
\&     MainLoop;
.Ve
.PP
For data that comes from a file you have to specify the encoding
unless it's encoded as ascii or iso\-8559\-1:
.PP
.Vb 6
\&     use Tk;
\&     open my $FH, "<:encoding(utf\-8)", "filename" or die $!;
\&     # or for utf\-16 data: open my $FH, "<:encoding(utf\-16)", "filename" or die $!;
\&     my $data = <$FH>;
\&     tkinit\->Label(\-text => $data)\->pack;
\&     MainLoop;
.Ve
.PP
Likewise, the encoding must be specified for all data which is read
from Tk widgets and that shall be output into a file. For the output,
the encoding should be always specified, even if it is iso\-8859\-1:
.PP
.Vb 11
\&     use Tk;
\&     $mw = tkinit;
\&     $mw\->Entry(\-textvariable => \e$input)\->pack;
\&     $mw\->Button(
\&         \-text => "Write to file",
\&         \-command => sub {
\&             open my $FH, ">:encoding(iso\-8859\-1)", "filename" or die $!;
\&             print $FH $input;
\&         },
\&     )\->pack;
\&     MainLoop;
.Ve
.PP
Note that Tk is Unicode-capable. So you need to be prepared that the
user has the appropriate input methods activated to enter non-ascii
characters. If an output encoding is used which does not cover the
whole of Unicode codepoints then a warning will be issued when writing
the file, like this:
.PP
.Vb 1
\&    "\ex{20ac}" does not map to iso\-8859\-1 at /usr/local/lib/perl5/site_perl/5.8.8/mach/Tk.pm line 250.
.Ve
.PP
Also, the same hexadecimal notation will be used as replacements for
the unhandled characters.
.PP
Handling encoding in I/O is pretty simple using the \f(CW\*(C`encoding\*(C'\fR PerlIO
layer, as described above. In other cases, such as when dealing with
databases, encoding the data usually has to be done manually, unless
the database driver has some means for automatically do this for you.
So when working with a MySQL database, one could use:
.PP
.Vb 10
\&     use Tk;
\&     use DBI;
\&     use Encode qw(encode);
\&     $mw = tkinit;
\&     $mw\->Entry(\-textvariable => \e$input)\->pack;
\&     $mw\->Button(
\&         \-text => "Write to database",
\&         \-command => sub {
\&             my $dbh = DBI\->connect("dbi:mysql:test", "root", "") or die;
\&             my $encoded_input = encode("iso\-8859\-1", $input);
\&             $dbh\->do("INSERT INTO testtable VALUES (?)", undef, $encoded_input) or die;
\&         },
\&     )\->pack;
\&     MainLoop;
.Ve
.PP
Unfortunately, there are still places in Perl ignorant of Unicode. One
of these places are filenames. Consequently, the file selectors in
Perl/Tk do not handle encoding of filenames properly. Currently they
suppose that filenames are in iso\-8859\-1 encoding, at least on Unix
systems. As soon as Perl has a concept of filename encodings, then
Perl/Tk will also implement such schemes.
