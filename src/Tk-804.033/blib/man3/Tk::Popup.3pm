.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Popup 3pm"
.TH Popup 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::Wm::Popup \- popup dialog windows.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& $dialog\->Popup(qw/
\&     \-popover    => \*(Aqcursor\*(Aq | $widget | undef,
\&     \-overanchor => c | n | ne | e | se | s | sw | w | nw,
\&     \-popanchor  => c | n | ne | e | se | s | sw | w | nw,
\& /);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You've probably had occasion to use a Dialog (or DialogBox)
widget. These widgets are derived from a Toplevel (which is a subclass
of Tk::Wm, the window manager) and spend most of their time in a
withdrawn state. It's also common to use Toplevels as containers for
custom built popup windows.  Menus, too, are dialogs derived from the
window manager class. For this discussion, we'll use the simple term
\&\fIdialog\fR to refer any widget that pops up and awaits user
interaction, whether it be a Menu, a special purpose Toplevel, or any
of the dialog-type widgets, including, but not limited to, ColorEditor,
Dialog, DialogBox, ErrorDialog, FileSelect, FBox, getOpenFile and
getSaveFile.
.PP
When it's time to display these dialogs, we call the Perl/Tk
window manager \fBPopup\fR method. \fBPopup\fR accepts three special purpose
options that specify placement information in high-level terms rather
than numerical coordinates. It is \fBPopup\fR's responsibility to take
our human specifications and turn them into actual screen
coordinates before displaying the dialog.
.PP
We can direct the dialog to appear in two general locations, either
over another window (e.g. the root window (screen) or a particular
widget), or over the cursor. This is called the \fIpopover
location\fR. Once we've made this decision we can further refine the
exact placement of the dialog relative to the popover location by
specifying the intersection of two \fIanchor points\fR. The \fIpopanchor
point\fR is associated with the dialog and the \fIoveranchor point\fR is
associated with the popover location (whether it be a window or the
cursor). The point where the two anchor points coincide is the \fIpopup
locus\fR. Anchor points are string values and can be \fIc\fR (for center),
or any of the eight cardinal compass points: \fIn\fR, \fIne\fR, \fIe\fR, \fIse\fR,
\&\fIs\fR, \fIsw\fR, \fIw\fR or \fInw\fR.
.PP
For example, if \fI\-popover\fR specifies a widget, \fI\-popanchor\fR is \fIsw\fR,
and \fI\-overanchor\fR is \fIne\fR, the the dialog's southwest corner pops up
at the widget's northeast corner.
.SH "OPTIONS"
.IX Header "OPTIONS"
The options recognized by \fBPopup\fR are as follows:
.IP "\fB\-popover\fR" 4
.IX Item "-popover"
Specifies whether the dialog \*(L"pops over\*(R" a window or the cursor. 
It may be the string \fIcursor\fR, a widget reference, or undef for the 
root window.
.IP "\fB\-popanchor\fR" 4
.IX Item "-popanchor"
Specifies the anchor point of the dialog.  For instance, if \fIe\fR is
specified, the right side of the dialog is the anchor.
.IP "\fB\-overanchor\fR" 4
.IX Item "-overanchor"
Specifies where the dialog should anchor relative to the popover
location. For instance, if \fIe\fR is specified the dialog appears over
the right side of the popover location and if it's \fIne\fR the the
dialog is positioned at the upper-right corner of the popover location.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Ing-Simmons, Steve Lidie
.PP
This code is distributed under the same terms as Perl.
