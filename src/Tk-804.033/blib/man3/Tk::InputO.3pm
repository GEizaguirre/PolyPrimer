.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "InputO 3pm"
.TH InputO 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::InputO \- Create and manipulate TIX InputO widgets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI\f(CI$inputonly\fI\fR = \fI\f(CI$parent\fI\fR\->\fBInputO\fR(?\fIoptions\fR?);
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
Only the following three standard options are supported by
\&\fBInputO\fR:
.PP
\&\fBcursor\fR	\fBwidth\fR	\fBheight\fR
.PP
See Tk::options for details of the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
\&\fBInputO\fR does not have any widget specific options.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBInputO\fR method creates a new window (given by the
\&\f(CW$widget\fR argument) and makes it into a \fBInputO\fR
widget.  Additional options, described above, may be specified on the
command line or in the option database to configure aspects of the
\&\fBInputO\fR such as its cursor or width.
.PP
\&\fBInputO\fR widgets are not visible to the user. The only
purpose of \fBInputO\fR widgets are to accept inputs from the
user, which can be done with the \fBbind\fR method.
.SH "WIDGET METHODS"
.IX Header "WIDGET METHODS"
The \fBInputO\fR method creates a widget object.
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in Tk::options which can be used to enquire and
modify the options described above.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.SH "BINDINGS"
.IX Header "BINDINGS"
\&\fBInputO\fR widgets have no default bindings.
