.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MsgBox 3pm"
.TH MsgBox 3pm "2018-12-25" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::MsgBox \- create and manipulate a message dialog
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Tk::MsgBox
\&    ...
\&    $d = $top\->MsgBox(\-title => "Title", \-type => "okcancel");
\&    ...
\&    $button = $d\->Show;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMsgBox\fR is a simple dialog with predefined buttons.
.SH "OPTIONS"
.IX Header "OPTIONS"
The options recognized by \fBMsgBox\fR are as follows:
.IP "\fB\-icon\fR" 4
.IX Item "-icon"
Specify the icon of the MsgBox. Valid values are \fBerror\fR, \fBinfo\fR,
\&\fBquestion\fR, or \fBwarning\fR.
.IP "\fB\-type\fR" 4
.IX Item "-type"
Specify the type of the MsgBox. Valid values are \fBabortretryignore\fR,
\&\fBok\fR, \fBokcancel\fR, \fBretrycancel\fR, \fByesno\fR, or \fByesnocancel\fR. The
type determines the buttons to be shown.
.IP "\fB\-default\fR" 4
.IX Item "-default"
Specify the default button. This must be one of \fBabort\fR, \fBretry\fR,
\&\fBignore\fR, \fBok\fR, \fBcancel\fR, \fByes\fR, or \fBno\fR, depending on the type
of the MsgBox previously specified.
.IP "\fB\-detail\fR" 4
.IX Item "-detail"
Specify text for the detail region of the MsgBox.
.IP "\fB\-message\fR" 4
.IX Item "-message"
Specify the message text of the MsgBox.
.IP "\fB\-title\fR" 4
.IX Item "-title"
Specify the title of the MsgBox.
.SH "METHODS"
.IX Header "METHODS"
\&\fBMsgBox\fR supports only one method as of now:
.IP "\fB\f(BIShow()\fB\fR" 4
.IX Item "Show()"
Displays the MsgBox until the user invokes one of the buttons. Returns
the name of the button invoked.
.SH "AUTHOR"
.IX Header "AUTHOR"
Translated from Tcl/Tk by \fBSlaven Rezic\fR srezic@cpan.org
.PP
This code is distributed under the same terms as Perl.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Tk::messageBox, Tk::DialogBox, Tk::Dialog.
