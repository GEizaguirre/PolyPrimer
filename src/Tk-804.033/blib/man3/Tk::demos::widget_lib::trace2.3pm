.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "demos::widget_lib::trace2 3pm"
.TH demos::widget_lib::trace2 3pm "2013-11-15" "Tk804.033" "perl/Tk Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::TraceText \- Text contents defined by a traced variable.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& $tt = $parent\->TraceText(\-option => value, ... );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Create a new \fBTraceText\fR widget that is derived from the standard \fBText\fR
widget. Because it inherits all the base options and methods it behaves
just like a \fBText\fR widget.  Additionally, \fBTraceText\fR adds a \-textvariable
option, which is a reference to a Perl scalar that defines the contents of
the widget.
.PP
Based on the Tcl/Tk TracedText \*(L"overridden widget\*(R" by Kevin Kenny.
.IP "\fB\-textvariable\fR" 4
.IX Item "-textvariable"
A scalar reference.  The value of the variable defines the contents of the
TraceText widget.  Using the keyboard to insert or delete text changes the 
value of the variable, and changing the variable alters the contents of the
TraceText widget.
.SH "METHODS"
.IX Header "METHODS"
Standard Text widget methods.
.SH "ADVERTISED SUBWIDGETS"
.IX Header "ADVERTISED SUBWIDGETS"
None.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\& my $tt = $mw\->TraceText( \-textvariable => \e$scalar );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Stephen.O.Lidie@Lehigh.EDU
.PP
Copyright (C) 2003 \- 2004, Steve Lidie. All rights reserved.
.PP
This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
.SH "KEYWORDS"
.IX Header "KEYWORDS"
text, trace
