.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "chooseColor 3pm"
.TH chooseColor 3pm "2013-11-15" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::chooseColor \- pops up a dialog box for the user to select a color.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
    \fI\f(CI$color\fI\fR = \fI\f(CI$widget\fI\fR\->\fBchooseColor\fR?(\fI\-option\fR=>\fIvalue\fR, ...)?;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The method \fBchooseColor\fR is implemented as a perl wrapper
on the core tk \*(L"command\*(R" \fBtk_chooseColor\fR, and \fI\f(CI$widget\fI\fR
is passed as the argument to the hidden \fB\-parent\fR option.
The implementation of internal \fBtk_chooseColor\fR is platform
specific, on Win32 it is a native dialog, and on \s-1UNIX/X11\s0 it is implemented
in terms of Tk::ColorEditor.
.PP
The \fBchooseColor\fR method pops up a dialog box for the
user to select a color. The following \fIoption-value\fR pairs are
possible as command line arguments:
.IP "\fB\-initialcolor\fR=>\fIcolor\fR" 4
.IX Item "-initialcolor=>color"
Specifies the color to display in the color dialog when it pops
up. \fIcolor\fR must be in a form acceptable to the \fBTk_GetColor\fR
function.
.IP "\fB\-parent\fR=>$widget" 4
.IX Item "-parent=>$widget"
Makes \f(CW$widget\fR the logical parent of the color dialog. The color
dialog is displayed on top of its parent window.
.IP "\fB\-title\fR=>\fItitleString\fR" 4
.IX Item "-title=>titleString"
Specifies a string to display as the title of the dialog box. If this
option is not specified, then a default title will be displayed.
.PP
If the user selects a color, \fBtk_chooseColor\fR will return the
name of the color in a form acceptable to \fBTk_GetColor\fR.  If the
user cancels the operation, the command will return \fBundef\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 2
\& $widget\->configure(\-fg => $parent\->chooseColor(\-initialcolor => \*(Aqgray\*(Aq,
\&                                                \-title => "Choose color"));
.Ve
.SH "KEYWORDS"
.IX Header "KEYWORDS"
color selection dialog
